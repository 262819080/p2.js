{
    "project": {
        "name": "p2.js",
        "description": "2D physics engine for the web",
        "version": "0.1.0"
    },
    "files": {
        "src/collision/Broadphase.js": {
            "name": "src/collision/Broadphase.js",
            "modules": {},
            "classes": {
                "Broadphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/GridBroadphase.js": {
            "name": "src/collision/GridBroadphase.js",
            "modules": {},
            "classes": {
                "GridBroadphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/NaiveBroadphase.js": {
            "name": "src/collision/NaiveBroadphase.js",
            "modules": {},
            "classes": {
                "NaiveBroadphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/collision/Nearphase.js": {
            "name": "src/collision/Nearphase.js",
            "modules": {},
            "classes": {
                "Nearphase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/Constraint.js": {
            "name": "src/constraints/Constraint.js",
            "modules": {},
            "classes": {
                "Constraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/ContactEquation.js": {
            "name": "src/constraints/ContactEquation.js",
            "modules": {},
            "classes": {
                "ContactEquation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/DistanceConstraint.js": {
            "name": "src/constraints/DistanceConstraint.js",
            "modules": {},
            "classes": {
                "DistanceConstraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/Equation.js": {
            "name": "src/constraints/Equation.js",
            "modules": {},
            "classes": {
                "Equation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/FrictionEquation.js": {
            "name": "src/constraints/FrictionEquation.js",
            "modules": {},
            "classes": {
                "FrictionEquation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/constraints/PointToPointConstraint.js": {
            "name": "src/constraints/PointToPointConstraint.js",
            "modules": {},
            "classes": {
                "PointToPointConstraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/mat2.js": {
            "name": "src/math/mat2.js",
            "modules": {},
            "classes": {
                "mat2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/vec2.js": {
            "name": "src/math/vec2.js",
            "modules": {},
            "classes": {
                "vec2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/objects/Body.js": {
            "name": "src/objects/Body.js",
            "modules": {},
            "classes": {
                "Body": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/objects/Spring.js": {
            "name": "src/objects/Spring.js",
            "modules": {},
            "classes": {
                "Spring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Circle.js": {
            "name": "src/shapes/Circle.js",
            "modules": {},
            "classes": {
                "Circle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Convex.js": {
            "name": "src/shapes/Convex.js",
            "modules": {},
            "classes": {
                "Convex": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Line.js": {
            "name": "src/shapes/Line.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Particle.js": {
            "name": "src/shapes/Particle.js",
            "modules": {},
            "classes": {
                "Particle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Plane.js": {
            "name": "src/shapes/Plane.js",
            "modules": {},
            "classes": {
                "Plane": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Rectangle.js": {
            "name": "src/shapes/Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/shapes/Shape.js": {
            "name": "src/shapes/Shape.js",
            "modules": {},
            "classes": {
                "Shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/solver/GSSolver.js": {
            "name": "src/solver/GSSolver.js",
            "modules": {},
            "classes": {
                "GSSolver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/solver/Island.js": {
            "name": "src/solver/Island.js",
            "modules": {},
            "classes": {
                "Island": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/solver/IslandSolver.js": {
            "name": "src/solver/IslandSolver.js",
            "modules": {},
            "classes": {
                "IslandSolver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/solver/Solver.js": {
            "name": "src/solver/Solver.js",
            "modules": {},
            "classes": {
                "Solver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/world/World.js": {
            "name": "src/world/World.js",
            "modules": {},
            "classes": {
                "World": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Broadphase": {
            "name": "Broadphase",
            "shortname": "Broadphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/Broadphase.js",
            "line": 6,
            "description": "Base class for broadphase implementations.",
            "is_constructor": 1
        },
        "GridBroadphase": {
            "name": "GridBroadphase",
            "shortname": "GridBroadphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/GridBroadphase.js",
            "line": 9,
            "description": "Broadphase that uses axis-aligned bins.",
            "is_constructor": 1,
            "extends": "Broadphase",
            "params": [
                {
                    "name": "xmin",
                    "description": "Lower x bound of the grid",
                    "type": "Number"
                },
                {
                    "name": "xmax",
                    "description": "Upper x bound",
                    "type": "Number"
                },
                {
                    "name": "ymin",
                    "description": "Lower y bound",
                    "type": "Number"
                },
                {
                    "name": "ymax",
                    "description": "Upper y bound",
                    "type": "Number"
                },
                {
                    "name": "nx",
                    "description": "Number of bins along x axis",
                    "type": "Number"
                },
                {
                    "name": "ny",
                    "description": "Number of bins along y axis",
                    "type": "Number"
                }
            ]
        },
        "NaiveBroadphase": {
            "name": "NaiveBroadphase",
            "shortname": "NaiveBroadphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/NaiveBroadphase.js",
            "line": 10,
            "description": "Naive broadphase implementation. Does N^2 tests.",
            "is_constructor": 1,
            "extends": "Broadphase"
        },
        "Nearphase": {
            "name": "Nearphase",
            "shortname": "Nearphase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/collision/Nearphase.js",
            "line": 26,
            "description": "Nearphase. Creates contacts and friction given shapes and transforms.",
            "is_constructor": 1
        },
        "Constraint": {
            "name": "Constraint",
            "shortname": "Constraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/Constraint.js",
            "line": 3,
            "description": "Base constraint class.",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ]
        },
        "ContactEquation": {
            "name": "ContactEquation",
            "shortname": "ContactEquation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/ContactEquation.js",
            "line": 6,
            "description": "Non-penetration constraint equation.",
            "is_constructor": 1,
            "extends": "Equation",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                }
            ]
        },
        "DistanceConstraint": {
            "name": "DistanceConstraint",
            "shortname": "DistanceConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/DistanceConstraint.js",
            "line": 7,
            "description": "Constraint that tries to keep the distance between two bodies constant.",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "dist",
                    "description": "The distance to keep between the bodies.",
                    "type": "Number"
                },
                {
                    "name": "maxForce",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{Constraint}"
        },
        "Equation": {
            "name": "Equation",
            "shortname": "Equation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/Equation.js",
            "line": 3,
            "description": "Base class for constraint equations.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bi",
                    "description": "First body participating in the equation",
                    "type": "Body"
                },
                {
                    "name": "bj",
                    "description": "Second body participating in the equation",
                    "type": "Body"
                },
                {
                    "name": "minForce",
                    "description": "Minimum force to apply. Default: -1e6",
                    "type": "Number"
                },
                {
                    "name": "maxForce",
                    "description": "Maximum force to apply. Default: 1e6",
                    "type": "Number"
                }
            ]
        },
        "FrictionEquation": {
            "name": "FrictionEquation",
            "shortname": "FrictionEquation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/FrictionEquation.js",
            "line": 19,
            "description": "Constrains the slipping in a contact along a tangent",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "slipForce",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{Equation}"
        },
        "PointToPointConstraint": {
            "name": "PointToPointConstraint",
            "shortname": "PointToPointConstraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/constraints/PointToPointConstraint.js",
            "line": 7,
            "description": "Connects two bodies at given offset points",
            "is_constructor": 1,
            "author": "schteppe",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "pivotA",
                    "description": "The point relative to the center of mass of bodyA which bodyA is constrained to.",
                    "type": "Float32Array"
                },
                {
                    "name": "bodyB",
                    "description": "Body that will be constrained in a similar way to the same point as bodyA. We will therefore get sort of a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.",
                    "type": "Body"
                },
                {
                    "name": "pivotB",
                    "description": "See pivotA.",
                    "type": "Float32Array"
                },
                {
                    "name": "maxForce",
                    "description": "The maximum force that should be applied to constrain the bodies.",
                    "type": "Number"
                }
            ],
            "extends": "{Constraint}"
        },
        "mat2": {
            "name": "mat2",
            "shortname": "mat2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/math/mat2.js",
            "line": 1,
            "description": "The mat2 object from glMatrix, extended with the functions documented here. See http://glmatrix.net for full doc."
        },
        "vec2": {
            "name": "vec2",
            "shortname": "vec2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/math/vec2.js",
            "line": 1,
            "description": "The vec2 object from glMatrix, extended with the functions documented here. See http://glmatrix.net for full doc."
        },
        "Body": {
            "name": "Body",
            "shortname": "Body",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/objects/Body.js",
            "line": 5,
            "description": "A physics body.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "shape",
                            "description": "Used for collision detection. If absent the body will not collide.",
                            "type": "Shape"
                        },
                        {
                            "name": "mass",
                            "description": "A number >= 0. If zero, the body becomes static. Defaults to static [0].",
                            "type": "Number"
                        },
                        {
                            "name": "position",
                            "description": "",
                            "type": "Float32Array"
                        },
                        {
                            "name": "velocity",
                            "description": "",
                            "type": "Float32Array"
                        },
                        {
                            "name": "angle",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "angularVelocity",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "force",
                            "description": "",
                            "type": "Float32Array"
                        },
                        {
                            "name": "angularForce",
                            "description": "",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "todo": [
                "Should not take mass as an argument to Body",
                "but as density to each Shape"
            ]
        },
        "Spring": {
            "name": "Spring",
            "shortname": "Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/objects/Spring.js",
            "line": 5,
            "description": "A spring, connecting two bodies.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "restLength",
                            "description": "A number > 0. Default: 1",
                            "type": "Number"
                        },
                        {
                            "name": "stiffness",
                            "description": "A number >= 0. Default: 100",
                            "type": "Number"
                        },
                        {
                            "name": "damping",
                            "description": "A number >= 0. Default: 1",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "todo": [
                "Should have anchor points in the bodies"
            ]
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Circle.js",
            "line": 5,
            "description": "Circle shape class.",
            "extends": "{Shape}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Convex": {
            "name": "Convex",
            "shortname": "Convex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Convex.js",
            "line": 7,
            "description": "Convex shape class.",
            "is_constructor": 1,
            "extends": "{Shape}",
            "params": [
                {
                    "name": "vertices",
                    "description": "An array of Float32Array vertices that span this shape. Vertices are given in counter-clockwise (CCW) direction.",
                    "type": "Array"
                }
            ]
        },
        "Plane": {
            "name": "Plane",
            "shortname": "Plane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Plane.js",
            "line": 5,
            "description": "Plane shape class. The plane is facing in the Y direction.",
            "extends": "{Shape}",
            "is_constructor": 1
        },
        "Particle": {
            "name": "Particle",
            "shortname": "Particle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Particle.js",
            "line": 5,
            "description": "Particle shape class.",
            "is_constructor": 1,
            "extends": "{Shape}"
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Rectangle.js",
            "line": 7,
            "description": "Rectangle shape class.",
            "is_constructor": 1,
            "extends": "{Convex}"
        },
        "Shape": {
            "name": "Shape",
            "shortname": "Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/shapes/Shape.js",
            "line": 3,
            "description": "Base class for shapes.",
            "is_constructor": 1
        },
        "GSSolver": {
            "name": "GSSolver",
            "shortname": "GSSolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/solver/GSSolver.js",
            "line": 8,
            "description": "Iterative Gauss-Seidel constraint equation solver.",
            "is_constructor": 1,
            "extends": "Solver",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "iterations",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "timeStep",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "stiffness",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "relaxation",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "tolerance",
                            "description": "",
                            "type": "Number"
                        }
                    ]
                }
            ]
        },
        "Island": {
            "name": "Island",
            "shortname": "Island",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/solver/Island.js",
            "line": 3,
            "description": "An island of bodies connected with equations.",
            "is_constructor": 1
        },
        "IslandSolver": {
            "name": "IslandSolver",
            "shortname": "IslandSolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/solver/IslandSolver.js",
            "line": 9,
            "description": "Splits the system of bodies and equations into independent islands",
            "is_constructor": 1,
            "params": [
                {
                    "name": "subsolver",
                    "description": "",
                    "type": "Solver"
                }
            ],
            "extends": "Solver"
        },
        "Solver": {
            "name": "Solver",
            "shortname": "Solver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/solver/Solver.js",
            "line": 3,
            "description": "Base class for constraint solvers.",
            "is_constructor": 1
        },
        "World": {
            "name": "World",
            "shortname": "World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/world/World.js",
            "line": 30,
            "description": "The dynamics world, where all bodies and constraints lives.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "solver",
                            "description": "Defaults to GSSolver.",
                            "type": "Solver"
                        },
                        {
                            "name": "gravity",
                            "description": "Defaults to [0,-9.78]",
                            "type": "Float32Array"
                        },
                        {
                            "name": "broadphase",
                            "description": "Defaults to NaiveBroadphase",
                            "type": "Broadphase"
                        }
                    ]
                }
            ],
            "extends": "{EventEmitter}"
        }
    },
    "classitems": [
        {
            "file": "src/collision/Broadphase.js",
            "line": 15,
            "description": "Get all potential intersecting body pairs.",
            "itemtype": "method",
            "name": "getCollisionPairs",
            "params": [
                {
                    "name": "world",
                    "description": "The world to search in.",
                    "type": "World"
                }
            ],
            "return": {
                "description": "An array of the bodies, ordered in pairs. Example: A result of [a,b,c,d] means that the potential pairs are: (a,b), (c,d).",
                "type": "Array"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 30,
            "description": "Check whether a circle and a convex intersects",
            "itemtype": "method",
            "name": "checkCircleConvex",
            "static": 1,
            "params": [
                {
                    "name": "circle",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "circleOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "convex",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "convexOffset",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Whether they intersect",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 44,
            "description": "checkCircleLine",
            "itemtype": "method",
            "name": "checkCircleLine",
            "static": 1,
            "params": [
                {
                    "name": "circle",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "circleOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "line",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "lineOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "lineAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 64,
            "description": "Plane/line intersection test",
            "itemtype": "method",
            "name": "checkPlaneLine",
            "static": 1,
            "params": [
                {
                    "name": "plane",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "planeOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "planeAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "line",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "lineOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "lineAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 84,
            "description": "Rectangle/rectangle intersection test",
            "itemtype": "method",
            "name": "checkRectangleRectangle",
            "static": 1,
            "params": [
                {
                    "name": "r1",
                    "description": "",
                    "type": "Rectangle"
                },
                {
                    "name": "offset1",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "r2",
                    "description": "",
                    "type": "Rectangle"
                },
                {
                    "name": "offset2",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 108,
            "description": "Convex/convex intersection test",
            "itemtype": "method",
            "name": "checkConvexConvex",
            "static": 1,
            "params": [
                {
                    "name": "convex",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "convexOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "convex",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "convexOffset",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 122,
            "description": "Circle/rectangle intersection test",
            "itemtype": "method",
            "name": "checkCircleRectangle",
            "static": 1,
            "params": [
                {
                    "name": "circle",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "circleOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "rectangle",
                    "description": "",
                    "type": "Rectangle"
                },
                {
                    "name": "rectangleOffset",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 142,
            "description": "Circle/Circle intersection test",
            "itemtype": "method",
            "name": "checkCircleCircle",
            "static": 1,
            "params": [
                {
                    "name": "c1",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "offset1",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "c2",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "offset2",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 161,
            "description": "Convex/Plane",
            "itemtype": "method",
            "name": "checkConvexPlane",
            "static": 1,
            "params": [
                {
                    "name": "convexShape",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "convexOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "convexAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "planeShape",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "planeOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "planeAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 190,
            "description": "Particle/Plane intersection test",
            "itemtype": "method",
            "name": "checkParticlePlane",
            "static": 1,
            "params": [
                {
                    "name": "particleShape",
                    "description": "",
                    "type": "Particle"
                },
                {
                    "name": "particleOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "planeShape",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "planeOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "planeAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 217,
            "description": "Circle/Particle intersection test",
            "itemtype": "method",
            "name": "checkCircleParticle",
            "static": 1,
            "params": [
                {
                    "name": "circleShape",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "circleOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "particleShape",
                    "description": "",
                    "type": "Particle"
                },
                {
                    "name": "particleOffset",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/Broadphase.js",
            "line": 236,
            "description": "Check whether a circle and a plane collides. See nearphaseCirclePlane() for param details.",
            "itemtype": "method",
            "name": "checkCirclePlane",
            "static": 1,
            "params": [
                {
                    "name": "circleShape",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "circleOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "planeShape",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "planeOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "planeAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if collision.",
                "type": "Boolean"
            },
            "class": "Broadphase"
        },
        {
            "file": "src/collision/NaiveBroadphase.js",
            "line": 26,
            "description": "Get the colliding pairs",
            "itemtype": "method",
            "name": "getCollisionPairs",
            "params": [
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "NaiveBroadphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 41,
            "description": "Throws away the old equatons and gets ready to create new",
            "itemtype": "method",
            "name": "reset",
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 60,
            "description": "Creates a ContactEquation, either by reusing an existing object or creating a new one.",
            "itemtype": "method",
            "name": "createContactEquation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "ContactEquation"
            },
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 74,
            "description": "Creates a FrictionEquation, either by reusing an existing object or creating a new one.",
            "itemtype": "method",
            "name": "createFrictionEquation",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "",
                "type": "FrictionEquation"
            },
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 89,
            "description": "Creates a FrictionEquation given the data in the ContactEquation. Uses same offset vectors ri and rj, but the tangent vector will be constructed from the collision normal.",
            "itemtype": "method",
            "name": "createFrictionFromContact",
            "params": [
                {
                    "name": "contactEquation",
                    "description": "",
                    "type": "ContactEquation"
                }
            ],
            "return": {
                "description": "",
                "type": "FrictionEquation"
            },
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 103,
            "description": "Plane/line nearphase",
            "itemtype": "method",
            "name": "planeLine",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 196,
            "description": "Circle/line nearphase",
            "itemtype": "method",
            "name": "circleLine",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Line"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 329,
            "description": "Circle/convex nearphase",
            "itemtype": "method",
            "name": "circleConvex",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 463,
            "description": "Circle/circle nearphase",
            "itemtype": "method",
            "name": "circleCircle",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 503,
            "description": "Convex/Plane nearphase",
            "itemtype": "method",
            "name": "convexPlane",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Plane"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 576,
            "description": "Nearphase for particle vs plane",
            "itemtype": "method",
            "name": "particlePlane",
            "params": [
                {
                    "name": "bi",
                    "description": "The particle body",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "Particle shape",
                    "type": "Particle"
                },
                {
                    "name": "xi",
                    "description": "World position for the particle",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "World angle for the particle",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "Plane body",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "Plane shape",
                    "type": "Plane"
                },
                {
                    "name": "xj",
                    "description": "World position for the plane",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "World angle for the plane",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 627,
            "description": "Circle/Particle nearphase",
            "itemtype": "method",
            "name": "circleParticle",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Particle"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 675,
            "description": "Creates ContactEquations and FrictionEquations for a collision.",
            "itemtype": "method",
            "name": "circlePlane",
            "params": [
                {
                    "name": "bi",
                    "description": "The first body that should be connected to the equations.",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "The circle shape participating in the collision.",
                    "type": "Circle"
                },
                {
                    "name": "xi",
                    "description": "Extra offset to take into account for the Shape, in addition to the one in circleBody.position. Will *not* be rotated by circleBody.angle (maybe it should, for sake of homogenity?). Set to null if none.",
                    "type": "Array"
                },
                {
                    "name": "bj",
                    "description": "The second body that should be connected to the equations.",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "The Plane shape that is participating",
                    "type": "Plane"
                },
                {
                    "name": "xj",
                    "description": "Extra offset for the plane shape.",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "Extra angle to apply to the plane",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 739,
            "description": "Convex/convex nearphase.See <a href=\"http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\">this article</a> for more info.",
            "itemtype": "method",
            "name": "convexConvex",
            "params": [
                {
                    "name": "bi",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "si",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xi",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ai",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bj",
                    "description": "",
                    "type": "Body"
                },
                {
                    "name": "sj",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "xj",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "aj",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 883,
            "description": "Project a Convex onto a world-oriented axis",
            "itemtype": "method",
            "name": "projectConvexOntoAxis",
            "static": 1,
            "params": [
                {
                    "name": "convexShape",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "convexOffset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "convexAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "worldAxis",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "result",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 931,
            "description": "Find a separating axis between the shapes, that maximizes the separating distance between them.",
            "itemtype": "method",
            "name": "findSeparatingAxis",
            "static": 1,
            "params": [
                {
                    "name": "c1",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "offset1",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c2",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "offset2",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sepAxis",
                    "description": "The resulting axis",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Whether the axis could be found.",
                "type": "Boolean"
            },
            "class": "Nearphase"
        },
        {
            "file": "src/collision/Nearphase.js",
            "line": 1010,
            "description": "Get the edge that has a normal closest to an axis.",
            "itemtype": "method",
            "name": "getClosestEdge",
            "static": 1,
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Convex"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "flip",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Index of the edge that is closest. This index and the next spans the resulting edge. Returns -1 if failed.",
                "type": "Number"
            },
            "class": "Nearphase"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 14,
            "description": "Equations to be solved in this constraint",
            "itemtype": "property",
            "name": "equations",
            "type": "{Array}",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 21,
            "description": "First body participating in the constraint.",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{Body}",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 28,
            "description": "Second body participating in the constraint.",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{Body}",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/Constraint.js",
            "line": 36,
            "description": "To be implemented by subclasses. Should update the internal constraint parameters.",
            "itemtype": "method",
            "name": "update",
            "class": "Constraint"
        },
        {
            "file": "src/constraints/DistanceConstraint.js",
            "line": 43,
            "description": "Update the constraint equations. Should be done if any of the bodies changed position, before solving.",
            "itemtype": "method",
            "name": "update",
            "class": "DistanceConstraint"
        },
        {
            "file": "src/constraints/Equation.js",
            "line": 15,
            "description": "Minimum force to apply when solving",
            "itemtype": "property",
            "name": "minForce",
            "type": "{Number}",
            "class": "Equation"
        },
        {
            "file": "src/constraints/Equation.js",
            "line": 22,
            "description": "Max force to apply when solving",
            "itemtype": "property",
            "name": "maxForce",
            "type": "{Number}",
            "class": "Equation"
        },
        {
            "file": "src/constraints/Equation.js",
            "line": 29,
            "description": "First body participating in the constraint",
            "itemtype": "property",
            "name": "bi",
            "type": "{Body}",
            "class": "Equation"
        },
        {
            "file": "src/constraints/Equation.js",
            "line": 36,
            "description": "Second body participating in the constraint",
            "itemtype": "property",
            "name": "bj",
            "type": "{Body}",
            "class": "Equation"
        },
        {
            "file": "src/constraints/Equation.js",
            "line": 52,
            "description": "Set stiffness parameters",
            "itemtype": "method",
            "name": "setSpookParams",
            "params": [
                {
                    "name": "k",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Equation"
        },
        {
            "file": "src/constraints/FrictionEquation.js",
            "line": 40,
            "description": "Set the slipping condition for the constraint. If the force",
            "itemtype": "method",
            "name": "setSlipForce",
            "params": [
                {
                    "name": "slipForce",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "FrictionEquation"
        },
        {
            "file": "src/math/vec2.js",
            "line": 11,
            "description": "Get the vector x component",
            "itemtype": "method",
            "name": "getX",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 22,
            "description": "Get the vector y component",
            "itemtype": "method",
            "name": "getY",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 33,
            "description": "Make a cross product and only return the z component",
            "itemtype": "method",
            "name": "crossLength",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 45,
            "description": "Cross product between a vector and the Z component of a vector",
            "itemtype": "method",
            "name": "crossVZ",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "vec",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "zcomp",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 60,
            "description": "Cross product between a vector and the Z component of a vector",
            "itemtype": "method",
            "name": "crossZV",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "zcomp",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "vec",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 75,
            "description": "Rotate a vector by an angle",
            "itemtype": "method",
            "name": "rotate",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "vec2"
        },
        {
            "file": "src/math/vec2.js",
            "line": 90,
            "description": "Compute centroid of a triangle spanned by vectors a,b,c. See http://easycalculation.com/analytical/learn-centroid.php",
            "itemtype": "method",
            "name": "centroid",
            "static": 1,
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "The out object",
                "type": "Float32Array"
            },
            "class": "vec2"
        },
        {
            "file": "src/objects/Body.js",
            "line": 24,
            "description": "The body identifyer",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 31,
            "description": "The shapes of the body.",
            "itemtype": "property",
            "name": "shapes",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 38,
            "description": "The local shape offsets, relative to the body center of mass.",
            "itemtype": "property",
            "name": "shapeOffsets",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 45,
            "description": "The body-local shape angle transformations.",
            "itemtype": "property",
            "name": "shapeAngles",
            "type": "{Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 52,
            "description": "The mass of the body.",
            "itemtype": "property",
            "name": "mass",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 59,
            "description": "The inverse mass of the body.",
            "itemtype": "property",
            "name": "invMass",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 66,
            "description": "The inertia of the body around the Z axis.",
            "itemtype": "property",
            "name": "inertia",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 73,
            "description": "The inverse inertia of the body.",
            "itemtype": "property",
            "name": "invInertia",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 82,
            "description": "The position of the body",
            "itemtype": "property",
            "name": "position",
            "type": "{Float32Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 90,
            "description": "The velocity of the body",
            "itemtype": "property",
            "name": "velocity",
            "type": "{Float32Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 98,
            "description": "Constraint velocity that was added to the body during the last step.",
            "itemtype": "property",
            "name": "vlambda",
            "type": "{Float32Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 105,
            "description": "Angular constraint velocity that was added to the body during the last step.",
            "itemtype": "property",
            "name": "wlambda",
            "type": "{Float32Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 112,
            "description": "The angle of the body",
            "itemtype": "property",
            "name": "angle",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 119,
            "description": "The angular velocity of the body",
            "itemtype": "property",
            "name": "angularVelocity",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 126,
            "description": "The force acting on the body",
            "itemtype": "property",
            "name": "force",
            "type": "{Float32Array}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 134,
            "description": "The angular force acting on the body",
            "itemtype": "property",
            "name": "angularForce",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 141,
            "description": "The type of motion this body has. Should be one of: Body.STATIC, Body.DYNAMIC and Body.KINEMATIC.",
            "itemtype": "property",
            "name": "motionState",
            "type": "{number}",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 151,
            "description": "Add a shape to the body",
            "itemtype": "method",
            "name": "addShape",
            "params": [
                {
                    "name": "shape",
                    "description": "",
                    "type": "Shape"
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 167,
            "description": "Updates .inertia, .invMass, .invInertia for this Body. Should be called when changing the structure of the Body.",
            "itemtype": "method",
            "name": "updateMassProperties",
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 191,
            "description": "Apply force to a world point. This could for example be a point on the RigidBody surface. Applying force this way will add to Body.force and Body.angularForce.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "force",
                    "description": "The force to add.",
                    "type": "Float32Array"
                },
                {
                    "name": "worldPoint",
                    "description": "A world point to apply the force on.",
                    "type": "Float32Array"
                }
            ],
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 213,
            "description": "Dynamic body.",
            "itemtype": "property",
            "name": "DYNAMIC",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 221,
            "description": "Static body.",
            "itemtype": "property",
            "name": "STATIC",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Body.js",
            "line": 229,
            "description": "Kinematic body.",
            "itemtype": "property",
            "name": "KINEMATIC",
            "type": "{Number}",
            "static": 1,
            "class": "Body"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 22,
            "description": "Rest length of the spring.",
            "itemtype": "property",
            "name": "restLength",
            "type": "{number}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 29,
            "description": "Stiffness of the spring.",
            "itemtype": "property",
            "name": "stiffness",
            "type": "{number}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 36,
            "description": "Damping of the spring.",
            "itemtype": "property",
            "name": "damping",
            "type": "{number}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 43,
            "description": "First connected body.",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{Body}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 50,
            "description": "Second connected body.",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{Body}",
            "class": "Spring"
        },
        {
            "file": "src/objects/Spring.js",
            "line": 63,
            "description": "Apply the spring force to the connected bodies.",
            "itemtype": "method",
            "name": "applyForce",
            "class": "Spring"
        },
        {
            "file": "src/shapes/Circle.js",
            "line": 15,
            "description": "The radius of the circle.",
            "itemtype": "property",
            "name": "radius",
            "type": "{number}",
            "class": "Circle"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 17,
            "description": "Vertices defined in the local frame.",
            "itemtype": "property",
            "name": "vertices",
            "type": "{Array}",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 24,
            "description": "The center of mass of the Convex",
            "itemtype": "property",
            "name": "centerOfMass",
            "type": "{Float32Array}",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 31,
            "description": "Triangulated version of this convex. The structure is Array of 3-Arrays, and each subarray contains 3 integers, referencing the vertices.",
            "itemtype": "property",
            "name": "triangles",
            "type": "{Array}",
            "class": "Convex"
        },
        {
            "file": "src/shapes/Convex.js",
            "line": 116,
            "description": "Compute the mass moment of inertia of the Convex.",
            "itemtype": "method",
            "name": "conputeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "todo": [
                "should use .triangles"
            ],
            "class": "Convex"
        },
        {
            "file": "src/shapes/Line.js",
            "line": 14,
            "description": "Length of this line",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "class": "Plane"
        },
        {
            "file": "src/shapes/Rectangle.js",
            "line": 25,
            "description": "Compute moment of inertia",
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Rectangle"
        },
        {
            "file": "src/shapes/Shape.js",
            "line": 19,
            "description": "Should return the moment of inertia around the Z axis of the body given the total mass. See <a href=\"http://en.wikipedia.org/wiki/List_of_moments_of_inertia\">Wikipedia's list of moments of inertia</a>.",
            "itemtype": "method",
            "name": "computeMomentOfInertia",
            "params": [
                {
                    "name": "mass",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the inertia is infinity or if the object simply isn't possible to rotate, return 0.",
                "type": "Number"
            },
            "class": "Shape"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 43,
            "description": "Set stiffness parameters",
            "itemtype": "method",
            "name": "setSpookParams",
            "params": [
                {
                    "name": "k",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GSSolver"
        },
        {
            "file": "src/solver/GSSolver.js",
            "line": 59,
            "description": "Solve the system of equations",
            "itemtype": "method",
            "name": "solve",
            "params": [
                {
                    "name": "dt",
                    "description": "Time step",
                    "type": "Number"
                },
                {
                    "name": "world",
                    "description": "World to solve",
                    "type": "World"
                }
            ],
            "class": "GSSolver"
        },
        {
            "file": "src/solver/Island.js",
            "line": 10,
            "description": "Current equations in this island.",
            "itemtype": "property",
            "name": "equations",
            "type": "{Array}",
            "class": "Island"
        },
        {
            "file": "src/solver/Island.js",
            "line": 17,
            "description": "Current bodies in this island.",
            "itemtype": "property",
            "name": "bodies",
            "type": "{Array}",
            "class": "Island"
        },
        {
            "file": "src/solver/Island.js",
            "line": 25,
            "description": "Clean this island from bodies and equations.",
            "itemtype": "method",
            "name": "reset",
            "class": "Island"
        },
        {
            "file": "src/solver/Island.js",
            "line": 34,
            "description": "Get all unique bodies in this island.",
            "itemtype": "method",
            "name": "getBodies",
            "return": {
                "description": "An array of Body",
                "type": "Array"
            },
            "class": "Island"
        },
        {
            "file": "src/solver/Island.js",
            "line": 57,
            "description": "Solves all constraints in the group of islands.",
            "itemtype": "method",
            "name": "solve",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "solver",
                    "description": "",
                    "type": "Solver"
                }
            ],
            "class": "Island"
        },
        {
            "file": "src/solver/IslandSolver.js",
            "line": 21,
            "description": "The solver used in the workers.",
            "itemtype": "property",
            "name": "subsolver",
            "type": "{Solver}",
            "class": "IslandSolver"
        },
        {
            "file": "src/solver/IslandSolver.js",
            "line": 28,
            "description": "Number of islands",
            "itemtype": "property",
            "name": "numIslands",
            "type": "{number}",
            "class": "IslandSolver"
        },
        {
            "file": "src/solver/IslandSolver.js",
            "line": 68,
            "description": "Solves the full system.",
            "itemtype": "method",
            "name": "solve",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "world",
                    "description": "",
                    "type": "World"
                }
            ],
            "class": "IslandSolver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 10,
            "description": "Current equations in the solver.",
            "itemtype": "property",
            "name": "equations",
            "type": "{Array}",
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 23,
            "description": "Add an equation to be solved.",
            "itemtype": "method",
            "name": "addEquation",
            "params": [
                {
                    "name": "eq",
                    "description": "",
                    "type": "Equation"
                }
            ],
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 33,
            "description": "Remove an equation.",
            "itemtype": "method",
            "name": "removeEquation",
            "params": [
                {
                    "name": "eq",
                    "description": "",
                    "type": "Equation"
                }
            ],
            "class": "Solver"
        },
        {
            "file": "src/solver/Solver.js",
            "line": 45,
            "description": "Remove all currently added equations.",
            "itemtype": "method",
            "name": "removeAllEquations",
            "class": "Solver"
        },
        {
            "file": "src/world/World.js",
            "line": 46,
            "description": "All springs in the world.",
            "itemtype": "property",
            "name": "springs",
            "type": "{Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 54,
            "description": "All bodies in the world.",
            "itemtype": "property",
            "name": "bodies",
            "type": "{Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 62,
            "description": "The solver used to satisfy constraints and contacts.",
            "itemtype": "property",
            "name": "solver",
            "type": "{Solver}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 70,
            "description": "The nearphase to use to generate contacts.",
            "itemtype": "property",
            "name": "nearphase",
            "type": "{Nearphase}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 78,
            "description": "Gravity in the world. This is applied on all bodies in the beginning of each step().",
            "itemtype": "property",
            "name": "",
            "type": "{Float32Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 86,
            "description": "Whether to do timing measurements during the step() or not.",
            "itemtype": "property",
            "name": "doPofiling",
            "type": "{Boolean}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 94,
            "description": "How many millisecconds the last step() took. This is updated each step if .doProfiling is set to true.",
            "itemtype": "property",
            "name": "lastStepTime",
            "type": "{Number}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 102,
            "description": "The broadphase algorithm to use.",
            "itemtype": "property",
            "name": "broadphase",
            "type": "{Broadphase}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 110,
            "description": "User-added constraints.",
            "itemtype": "property",
            "name": "constraints",
            "type": "{Array}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 118,
            "description": "Friction between all bodies. Should in the future be replaced by per-body material properties.",
            "itemtype": "property",
            "name": "friction",
            "type": "{Number}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 125,
            "description": "For keeping track of what time step size we used last step",
            "itemtype": "property",
            "name": "lastTimeStep",
            "type": "{Number}",
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 151,
            "description": "Add a constraint to the simulation.",
            "itemtype": "method",
            "name": "addConstraint",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Constraint"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 162,
            "description": "Removes a constraint",
            "itemtype": "method",
            "name": "removeConstraint",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Constraint"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 186,
            "description": "Step the physics world forward in time.",
            "itemtype": "method",
            "name": "step",
            "params": [
                {
                    "name": "dt",
                    "description": "The time step size to use.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Called when done.",
                    "type": "Function"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 365,
            "description": "Add a spring to the simulation",
            "itemtype": "method",
            "name": "addSpring",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Spring"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 377,
            "description": "Remove a spring",
            "itemtype": "method",
            "name": "removeSpring",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Spring"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 389,
            "description": "Add a body to the simulation",
            "itemtype": "method",
            "name": "addBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 401,
            "description": "Remove a body from the simulation",
            "itemtype": "method",
            "name": "removeBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 413,
            "description": "Convert the world to a JSON-serializable Object.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 522,
            "description": "Load a scene from a serialized state.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True on success, else false.",
                "type": "Boolean"
            },
            "class": "World"
        },
        {
            "file": "src/world/World.js",
            "line": 614,
            "description": "Resets the World, removes all bodies, constraints and springs.",
            "itemtype": "method",
            "name": "clear",
            "class": "World"
        }
    ],
    "warnings": []
}